# AutoStickBackUp   
# Codebeschreibung: Opens a window that lets you choose where you want to save your BackUp and which Folders or Files you want to save
# Autors: Nicola, Diego
# Version: 2
# Date: 12.12.2023
#Generated Form Function
function GenerateForm {
    ########################################################################
    # Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
    # Generated On: 05.12.2023 09:51
    # Generated By: Diego Straub
    # My former Project, it lets you choose the USB Stick, Folder and File types
    ########################################################################
    
    #region Import the Assemblies
    [reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
    [reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
    #endregion
    
    #region Generated Form Objects
    $frm_autostickbackup = New-Object System.Windows.Forms.Form
    $btn_cancel2 = New-Object System.Windows.Forms.Button
    $btn_run = New-Object System.Windows.Forms.Button
    $lbl_choosefile = New-Object System.Windows.Forms.Label
    $lbl_choosefolder = New-Object System.Windows.Forms.Label
    $cbx_choosefile = New-Object System.Windows.Forms.Button
    $cbx_choosefolder = New-Object System.Windows.Forms.ComboBox
    $cbx_chooseusb = New-Object System.Windows.Forms.ComboBox
    $lbl_chooseusb = New-Object System.Windows.Forms.Label
    $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
    #endregion Generated Form Objects
    
    #----------------------------------------------
    #Generated Event Script Blocks
    #----------------------------------------------
    #Provide Custom Code for events specified in PrimalForms.
    $cbx_choosefolder_OnClick = {
        $folderBrowserDialog = New-Object System.Windows.Forms.FolderBrowserDialog
        $folderBrowserDialog.Description = "Select a folder for backup"
        $result = $folderBrowserDialog.ShowDialog()
    
        if ($result -eq "OK") {
            $selectedFolder = $folderBrowserDialog.SelectedPath
            $cbx_choosefolder.Text = $selectedFolder
        }
    }
    
    $cbx_chooseusb_OnClick = {
        try {
            $cbx_chooseusb.Items.Clear()  #Cleared all Items
    
            # Findet alle USB's und Füült die Combobox
            $usbDevices = Get-CimInstance -ClassName Win32_DiskDrive | Where-Object { $_.InterfaceType -eq "USB" }
    
            foreach ($device in $usbDevices) {
                $cbx_chooseusb.Items.Add($device.Model)
            }
        } 
        catch {
            Write-Host "Error retrieving USB devices: $_.Exception.Message"
        }
    }
    
    $btn_Run_Click = {
        $selectedFolder = $cbx_choosefolder.Text
        $selectedFileTypes = $cbx_choosefile.Text -split "," | ForEach-Object { $_.Trim() }
        $selectedUSB = $cbx_chooseusb.Text
    
        # Folder Exist Check
        if (-not (Test-Path $selectedFolder -PathType Container)) {
            Write-Host "Selected folder does not exist: $selectedFolder"
            return
        }
    
        # USB selected Check
        if ([string]::IsNullOrWhiteSpace($selectedUSB)) {
            Write-Host "No USB device selected."
            return
        }
    
        # Get USB based on Model Name
        $usbDevice = Get-CimInstance -ClassName Win32_DiskDrive | Where-Object { $_.Model -eq $selectedUSB }
    
        if ($usbDevice -eq $null) {
            Write-Host "USB device not found: $selectedUSB"
            return
        }
    
        # Get Partition
        $disk = Get-CimAssociatedInstance -InputObject $usbDevice -ResultClassName Win32_DiskPartition
        $partition = Get-CimAssociatedInstance -InputObject $disk -ResultClassName Win32_LogicalDisk
    
        if ($partition -eq $null) {
            Write-Host "Partition not found for USB device: $selectedUSB"
            return
        }
    
        # Get drive Letter for USB
        $driveLetter = $partition.DeviceID
    
        # Create the folder with the current date and time
        $currentDateTime = Get-Date -Format "yyyy-MM-dd HH-mm-ss"
        $folderName = "$currentDateTime"
        $folderPath = Join-Path -Path $driveLetter -ChildPath $folderName
        New-Item -Path $folderPath -ItemType Directory | Out-Null
    
        # Copy selected Items into USB folder
        $allItemsToCopy = Get-ChildItem -Path $selectedFolder -Force
    
        foreach ($item in $allItemsToCopy) {
            if ($item -is [System.IO.DirectoryInfo]) {
                # Copy folders
                $folderName = $item.Name
                if ($selectedFileTypes -contains "Folder" -or $selectedFileTypes -contains "All") {
                    try {
                        $folderFullName = $item.FullName
                        $newFolderPath = Join-Path -Path $folderPath -ChildPath $folderName
                        Write-Host "Copying folder: $folderFullName to $newFolderPath"
                        Copy-Item -Path $folderFullName -Destination $newFolderPath -Force -Recurse
                    } 
                    catch {
                        Write-Host "Error copying folder: $_.Exception.Message"
                    }
                }
            } 
            elseif ($item -is [System.IO.FileInfo]) {
                # Copy files
                $fileExtension = $item.Extension.TrimStart('.')
                if ($selectedFileTypes -contains $fileExtension -or $selectedFileTypes -contains "All") {
                    try {
                        $fileFullName = $item.FullName
                        $newFilePath = Join-Path -Path $folderPath -ChildPath $item.Name
                        Write-Host "Copying file: $fileFullName to $newFilePath"
                        Copy-Item -Path $fileFullName -Destination $newFilePath -Force
                    } 
                    catch {
                        Write-Host "Error copying file: $_.Exception.Message"
                    }
                }
            }
        }
    
        Write-Host "Copy completed."
        $frm_autostickbackup.Close()
    }
    
    $cbx_choosefile_Click = {
        $fileTypes = @("txt", "pdf", "doc", "xlsx", "jpg", "png", "MP3", "WAV", "MP4", "AVI", "pptx", "Folder", "All")
    
        $checkedListBox = New-Object System.Windows.Forms.CheckedListBox
        $checkedListBox.Items.AddRange($fileTypes)
        # $checkedListBox.Size = System.Drawing.Size()
    
        $form = New-Object System.Windows.Forms.Form
        $form.Text = "Choose File Types"
        $form.Size = New-Object System.Drawing.Size(150, 190)
        $form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
        $form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen
    
        $okButton = New-Object System.Windows.Forms.Button
        $okButton.Text = "OK"
        $okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
        $okButton.Location = New-Object System.Drawing.Point(45, 110)
        $form.AcceptButton = $okButton
    
        $form.Controls.Add($checkedListBox)
        $form.Controls.Add($okButton)
    
        $result = $form.ShowDialog()
    
        # If the user Presses Okay it moves all selected Items onto button Text
        $selectedItems = $checkedListBox.CheckedItems
        $selectedItemsString = $selectedItems -join ","
        $cbx_choosefile.Text = $selectedItemsString
    }
    
    
    # Associate event handlers with buttons
    $btn_Run.Add_Click($btn_Run_Click)
    $cbx_choosefile.Add_Click($cbx_choosefile_Click)
    
    $btn_cancel2_OnClick = 
    {
        $frm_autostickbackup.Close()
    }
    
    $OnLoadForm_StateCorrection =
    {
        $frm_autostickbackup.WindowState = $InitialFormWindowState
    }
    
    #----------------------------------------------
    #region Generated Form Code
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 370
    $System_Drawing_Size.Width = 280
    $frm_autostickbackup.ClientSize = $System_Drawing_Size
    $frm_autostickbackup.DataBindings.DefaultDataSourceUpdateMode = 0
    $frm_autostickbackup.Name = "frm_autostickbackup"
    $frm_autostickbackup.Text = "AutoStickBackUp"
    
    
    $btn_cancel2.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 148
    $System_Drawing_Point.Y = 293
    $btn_cancel2.Location = $System_Drawing_Point
    $btn_cancel2.Name = "btn_cancel2"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 52
    $System_Drawing_Size.Width = 100
    $btn_cancel2.Size = $System_Drawing_Size
    $btn_cancel2.TabIndex = 7
    $btn_cancel2.Text = "Cancel"
    $btn_cancel2.UseVisualStyleBackColor = $True
    $btn_cancel2.add_Click($btn_cancel2_OnClick)
    
    $frm_autostickbackup.Controls.Add($btn_cancel2)
    
    
    $btn_run.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 293
    $btn_run.Location = $System_Drawing_Point
    $btn_run.Name = "btn_run"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 52
    $System_Drawing_Size.Width = 100
    $btn_run.Size = $System_Drawing_Size
    $btn_run.TabIndex = 6
    $btn_run.Text = "Run"
    $btn_run.UseVisualStyleBackColor = $True
    $btn_run.add_Click($btn_run_OnClick)
    
    $frm_autostickbackup.Controls.Add($btn_run)
    
    $lbl_choosefile.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 196
    $lbl_choosefile.Location = $System_Drawing_Point
    $lbl_choosefile.Name = "lbl_choosefile"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 183
    $lbl_choosefile.Size = $System_Drawing_Size
    $lbl_choosefile.TabIndex = 5
    $lbl_choosefile.Text = "Choose the file types to BackUp"
    
    $frm_autostickbackup.Controls.Add($lbl_choosefile)
    
    $lbl_choosefolder.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 106
    $lbl_choosefolder.Location = $System_Drawing_Point
    $lbl_choosefolder.Name = "lbl_choosefolder"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 250
    $lbl_choosefolder.Size = $System_Drawing_Size
    $lbl_choosefolder.TabIndex = 4
    $lbl_choosefolder.Text = "Choose the folder you''d like to BackUp"
    
    $frm_autostickbackup.Controls.Add($lbl_choosefolder)
    
    $cbx_choosefile.DataBindings.DefaultDataSourceUpdateMode = 0
    # $cbx_choosefile.FormattingEnabled = $True
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 222
    $cbx_choosefile.Location = $System_Drawing_Point
    $cbx_choosefile.Name = "cbx_choosefile"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 21
    $System_Drawing_Size.Width = 225
    $cbx_choosefile.Text = "Click to choose"
    $cbx_choosefile.Size = $System_Drawing_Size
    $cbx_choosefile.TabIndex = 3
    $cbx_choosefile.add_Click($cbx_choosefile_OnClick)
    
    $frm_autostickbackup.Controls.Add($cbx_choosefile)
    
    $cbx_choosefolder.DataBindings.DefaultDataSourceUpdateMode = 0
    $cbx_choosefolder.FormattingEnabled = $True
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 132
    $cbx_choosefolder.Location = $System_Drawing_Point
    $cbx_choosefolder.Name = "cbx_choosefolder"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 21
    $System_Drawing_Size.Width = 225
    $cbx_choosefolder.Size = $System_Drawing_Size
    $cbx_choosefolder.TabIndex = 2
    $cbx_choosefolder.add_Click($cbx_choosefolder_OnClick)
    
    $frm_autostickbackup.Controls.Add($cbx_choosefolder)
    
    $cbx_chooseusb.DataBindings.DefaultDataSourceUpdateMode = 0
    $cbx_chooseusb.FormattingEnabled = $True
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 47
    $cbx_chooseusb.Location = $System_Drawing_Point
    $cbx_chooseusb.Name = "cbx_chooseusb"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 21
    $System_Drawing_Size.Width = 225
    $cbx_chooseusb.Size = $System_Drawing_Size
    $cbx_chooseusb.TabIndex = 1
    $cbx_chooseusb.add_Click($cbx_chooseusb_OnClick)
    
    $frm_autostickbackup.Controls.Add($cbx_chooseusb)
    
    $lbl_chooseusb.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 23
    $System_Drawing_Point.Y = 21
    $lbl_chooseusb.Location = $System_Drawing_Point
    $lbl_chooseusb.Name = "lbl_chooseusb"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 100
    $lbl_chooseusb.Size = $System_Drawing_Size
    $lbl_chooseusb.TabIndex = 0
    $lbl_chooseusb.Text = "Choose USB"
    
    $frm_autostickbackup.Controls.Add($lbl_chooseusb)
    
    #endregion Generated Form Code
    
    #Save the initial state of the form
    $InitialFormWindowState = $frm_autostickbackup.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $frm_autostickbackup.add_Load($OnLoadForm_StateCorrection)
    #Show the Form
    $frm_autostickbackup.ShowDialog() | Out-Null
    
} #End Function
    
#Call the Function
GenerateForm